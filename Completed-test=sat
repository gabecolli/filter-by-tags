$vms= get-azvm
foreach($vm in $vms){
$WorkspaceID = '561131d9-5351-4f04-96fd-f812dfceb8be'
    $vm_str = $vm.Name.ToString()
    $Query = "

    let timeRangeStart = now(-3d);
    let timeRangeEnd = now();
    Heartbeat
        | where Computer == '$vm_str'
        | extend ResourceGroup = case(ResourceGroup <> '', ResourceGroup, 'On-Prem')
        | where TimeGenerated > timeRangeStart and TimeGenerated < timeRangeEnd
        | extend Resource=tolower(iff(isempty(_ResourceId), Resource, _ResourceId))
        | summarize heartbeat_per_hour=count() by bin_at(TimeGenerated, 1h, timeRangeStart), Resource,ResourceGroup
        | extend available_per_hour=iff(heartbeat_per_hour>0, true, false)
        | extend RG = tolower(ResourceGroup)
        | summarize total_available_hours=countif(available_per_hour==true) by Resource,RG
        | extend total_number_of_buckets=round((timeRangeEnd-timeRangeStart)/1h)
        | extend round(availability_rate=total_available_hours*100/total_number_of_buckets,2)
        | order by availability_rate asc




    "
    $Results = Invoke-AzOperationalInsightsQuery -WorkspaceId $WorkspaceID -Query $Query 
    $Resource = $Results.Results.Resource
   
    
    $rg = $vm.ResourceGroupName
    
    $total_available_hours = $Results.Results.total_available_hours

    $total_available_hours.GetType()
    $vmtags = $vm.Tags.Values
    $avail_percent = $total_available_hours / 72 * 100
   
   
    #convert percentage to string
    $percent_avail = $avail_percent.ToString()
    echo $percent_avail

    







    # Replace with your Workspace ID
$CustomerId = "561131d9-5351-4f04-96fd-f812dfceb8be"  

# Replace with your Primary Key
$SharedKey = "JJSTkrwURB+kzhCxShrG6IReJ4CsM6s6ezuwu3v5312lak5hsfkUkg+Mk+0dnjTkfqPCq6X7Lmtet0Eo/uM5HQ=="

# Specify the name of the record type that you'll be creating
$LogType = "secondattempt"

# You can use an optional field to specify the timestamp from the data. If the time field is not specified, Azure Monitor assumes the time is the message ingestion time
$TimeStampField = ""


# Create two records with the same set of properties to create
$json = @"
[{  "Computer": "$Vm_str",
            "Resource": "$Resource",
            "RG" : "$rg",
            "tags" : "$vmtags",
            "total_available_hours" : "$total_available_hours",
            "Availability" : "$percent_avail"
            
             
            
   
}]
"@

# Create the function to create the authorization signature
Function Build-Signature ($customerId, $sharedKey, $date, $contentLength, $method, $contentType, $resource)
{
    $xHeaders = "x-ms-date:" + $date
    $stringToHash = $method + "`n" + $contentLength + "`n" + $contentType + "`n" + $xHeaders + "`n" + $resource

    $bytesToHash = [Text.Encoding]::UTF8.GetBytes($stringToHash)
    $keyBytes = [Convert]::FromBase64String($sharedKey)

    $sha256 = New-Object System.Security.Cryptography.HMACSHA256
    $sha256.Key = $keyBytes
    $calculatedHash = $sha256.ComputeHash($bytesToHash)
    $encodedHash = [Convert]::ToBase64String($calculatedHash)
    $authorization = 'SharedKey {0}:{1}' -f $customerId,$encodedHash
    return $authorization
}

# Create the function to create and post the request
Function Post-LogAnalyticsData($customerId, $sharedKey, $body, $logType)
{
    $method = "POST"
    $contentType = "application/json"
    $resource = "/api/logs"
    $rfc1123date = [DateTime]::UtcNow.ToString("r")
    $contentLength = $body.Length
    $signature = Build-Signature `
        -customerId $customerId `
        -sharedKey $sharedKey `
        -date $rfc1123date `
        -contentLength $contentLength `
        -method $method `
        -contentType $contentType `
        -resource $resource
    $uri = "https://" + $customerId + ".ods.opinsights.azure.com" + $resource + "?api-version=2016-04-01"

    $headers = @{
        "Authorization" = $signature;
        "Log-Type" = $logType;
        "x-ms-date" = $rfc1123date;
        "time-generated-field" = $TimeStampField;
    }

    $response = Invoke-WebRequest -Uri $uri -Method $method -ContentType $contentType -Headers $headers -Body $body -UseBasicParsing
    return $response.StatusCode

}

# Submit the data to the API endpoint
Post-LogAnalyticsData -customerId $customerId -sharedKey $sharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($json)) -logType $logType
200


# working on adding tag values
}
